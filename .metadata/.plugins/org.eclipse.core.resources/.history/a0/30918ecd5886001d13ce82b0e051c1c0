package com.sprint1.tourmanagement.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.sprint1.tourmanagement.entity.Reservation;
import com.sprint1.tourmanagement.exception.UserNotFoundException;
import com.sprint1.tourmanagement.service.ReservationService;
import com.sprint1.tourmanagement.service.UserService;

@RestController
public class ReservationController {
	
	@Autowired
	private ReservationService reservationService;
	
	@Autowired
	private UserService userService;
	

	@PostMapping("New_Reservation/{UserId}/{TourId}/{PaymentInfo}/{ReservedDate}/{PaymentDate}")
	public ResponseEntity<Reservation> reserveTour(@PathVariable("UserId") int userId,@PathVariable("TourId")int tourId,@PathVariable("PaymentInfo")String paymentInfo,@PathVariable("ReservedDate") String rDate,@PathVariable("PaymentDate") String pDate){
		LocalDate reservedDate=LocalDate.parse(rDate);
		LocalDate paymentDate=LocalDate.parse(pDate);
		Reservation reservation=reservationService.newReservation(userId,tourId,paymentInfo.toLowerCase(),reservedDate,paymentDate);
		ResponseEntity<Reservation> responseEntity=new ResponseEntity<>(reservation,HttpStatus.OK);
		return responseEntity;	
	}
	
//	@GetMapping("View_All_Reservations")
//	public ResponseEntity<List<Reservation>> fetchAll(){
//		List<Reservation> list=reservationService.getAllReservation();
//		ResponseEntity<List<Reservation>> responseEntity=new ResponseEntity<>(list,HttpStatus.OK);
//		return responseEntity;
//		
//	}
	
	@GetMapping("View_All_Reservations/{UserType}/{UserId}/{Password}")
	public ResponseEntity<List<Reservation>> fetchAll(@PathVariable("UserType") String userType,@PathVariable("UserId") String userId,@PathVariable("Password") String password){
		if(userType.equalsIgnoreCase("Admin")) {
			throw new UserNotFoundException("Users other than admin can't view the Reservations");
		}
		String adminValid=userService.userLogin(userType, userId, password);
//		if(!adminValid.equalsIgnoreCase("User Successfully Logged in")) {
//			throw new UserNotFoundException("UserId or password is Invalid");
//		}
		if(adminValid.equals("User Successfully Logged in"))
		{
			List<Reservation> list=reservationService.getAllReservation();
			ResponseEntity<List<Reservation>> responseEntity=new ResponseEntity<>(list,HttpStatus.OK);
			return responseEntity;		
		}
	}
	
	@GetMapping("View_Reservation/{userId}")
	public ResponseEntity<List<Reservation>> viewReservation(@PathVariable("userId") int userId){
		List<Reservation> reservation=reservationService.viewReservation(userId);
		ResponseEntity<List<Reservation>> responseEntity=new ResponseEntity<>(reservation,HttpStatus.OK);
		return responseEntity;	
	}
	
	@PutMapping("Modify_Reservation")
	public ResponseEntity<Reservation> updateReservation(@RequestBody Reservation reservation){
		Reservation ureservation=reservationService.modifyReservation(reservation);
		ResponseEntity<Reservation> responseEntity=new ResponseEntity<>(ureservation,HttpStatus.OK);
		return responseEntity;
	}
	
//	@PutMapping("Modify_Reservation/{ReservationId}")
//	public ResponseEntity<ReservationDto> updateReservation(@RequestBody ReservationDto reservationDto){
//		ReservationDto ureservation=reservationService.modifyReservation(reservationDto);
//		ResponseEntity<ReservationDto> responseEntity=new ResponseEntity<>(ureservation,HttpStatus.OK);
//		return responseEntity;
//	}
//	
	
}
